<<<<<<< HEAD
var arrayEachRight = require('./internal/arrayEachRight'),
    baseEachRight = require('./internal/baseEachRight'),
    isArray = require('./isArray'),
    toFunction = require('./internal/toFunction');
=======
var arrayEachRight = require('./_arrayEachRight'),
    baseEachRight = require('./_baseEachRight'),
    castFunction = require('./_castFunction'),
    isArray = require('./isArray');
>>>>>>> origin/master

/**
 * This method is like `_.forEach` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
<<<<<<< HEAD
=======
 * @since 2.0.0
>>>>>>> origin/master
 * @alias eachRight
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
<<<<<<< HEAD
=======
 * @see _.forEach
>>>>>>> origin/master
 * @example
 *
 * _.forEachRight([1, 2], function(value) {
 *   console.log(value);
 * });
<<<<<<< HEAD
 * // => logs `2` then `1`
 */
function forEachRight(collection, iteratee) {
  return (typeof iteratee == 'function' && isArray(collection))
    ? arrayEachRight(collection, iteratee)
    : baseEachRight(collection, toFunction(iteratee));
=======
 * // => Logs `2` then `1`.
 */
function forEachRight(collection, iteratee) {
  var func = isArray(collection) ? arrayEachRight : baseEachRight;
  return func(collection, castFunction(iteratee));
>>>>>>> origin/master
}

module.exports = forEachRight;
